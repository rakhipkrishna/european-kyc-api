openapi: 3.0.3
info:
  title: European KYC API
  description: API for KYC onboarding and verification of banking customers in compliance with GDPR and AMLD.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
    url: https://example.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1

security:
  - OAuth2: [kyc.read, kyc.write]

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /oauth/token
          scopes:
            kyc.read: Read KYC data
            kyc.write: Submit or update KYC data

  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
        city:
          type: string
        country:
          type: string
          example: DE
    Customer:
      type: object
      required: [first_name, last_name, dob, nationality, address, email, phone, consent_given]
      properties:
        first_name:
          type: string
        last_name:
          type: string
        dob:
          type: string
          format: date
        nationality:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        email:
          type: string
          format: email
        phone:
          type: string
        consent_given:
          type: boolean
        created_at:
          type: string
          format: date-time

paths:
  /customers:
    post:
      summary: Onboard a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created
        '400':
          description: Invalid request

  /customers/{id}/documents:
    post:
      summary: Upload identity documents
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                document:
                  type: string
                  format: binary
                type:
                  type: string
                  enum: [passport, id_card, driver's_license, selfie]
      responses:
        '200':
          description: Document uploaded
        '400':
          description: Invalid upload

  /customers/{id}/status:
    get:
      summary: Check KYC verification status
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Status retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [pending_verification, verified, rejected, resubmit_required]

  /customers/{id}/screening:
    get:
      summary: Get PEP/Sanctions screening result
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Screening data

  /customers/{id}/data:
    get:
      summary: GDPR data access request
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer data retrieved

  /customers/{id}:
    delete:
      summary: Delete customer data (GDPR Right to be Forgotten)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Customer data deleted
        '404':
          description: Customer not found